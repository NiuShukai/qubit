/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei/useGLTF";
import { useFrame } from "react-three-fiber";

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";

type GLTFResult = GLTF & {
  nodes: {
    ["buffer-0-mesh-0"]: THREE.Mesh;
    ["buffer-0-mesh-0_1"]: THREE.Mesh;
  };
  materials: {
    white: THREE.MeshStandardMaterial;
    black: THREE.MeshStandardMaterial;
  };
};

export default function Model(
  props: JSX.IntrinsicElements["group"] & { xDelta: number; yDelta: number }
) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/models/dice.glb") as GLTFResult;

  useFrame(() => {
    if (group.current !== undefined) {
      group.current.rotation.x += props.xDelta;
      group.current.rotation.y += props.yDelta;
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[2.5, -0.81, -0.84]}>
        <mesh
          castShadow
          material={materials.white}
          geometry={nodes["buffer-0-mesh-0"].geometry}
        />
        <mesh
          castShadow
          material={materials.black}
          geometry={nodes["buffer-0-mesh-0_1"].geometry}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/dice.glb");
